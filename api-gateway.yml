# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
#logging:
  #level:
    #org:
      #springframework:
        #security: DEBUG
logging:
  level:
    org.springframework.security: DEBUG
# setting user
authserver: 
  hostname: localhost 
  port: 9999 
  contextPath: uaa 
# Define the port where the API gateway server would be running
server:
  port: 8765
  session-timeout: 10

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
zuul:
  #ignored-services: '*'
  #ignoredPatterns: /**/api/**
  routes:
    configgeneral:
      path: /configg/**
      #serviceId: configgeneral
      url: http://localhost:8083
    flightcontrol:
      path: /flightc/**
      #serviceId: flightcontrol
      url: http://localhost:8082
    complete-air: /complui/**
    farecontrol:
      path: /farecontrol/**
      #serviceId: farecontrol
      url: http://localhost:8084
    user:
      path: /api/loggedinuser/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}
    user-service:
      path: /users/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}
  addProxyHeaders: true
# Define security
security:
  user:
    password: none #password
  oauth2:
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: client
      clientSecret: secret
      #scope: read
    resource:
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/user
      preferTokenInfo: false
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
#ribbon:
  #ConnectTimeout: 3000
  #ReadTimeout: 60000
